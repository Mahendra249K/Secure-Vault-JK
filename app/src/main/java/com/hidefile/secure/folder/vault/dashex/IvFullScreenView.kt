package com.hidefile.secure.folder.vault.dasheximport android.annotation.SuppressLintimport android.app.Activityimport android.app.ProgressDialogimport android.content.Contextimport android.os.AsyncTaskimport android.os.Bundleimport android.util.Logimport android.view.Viewimport android.view.ViewGroupimport android.widget.*import androidx.appcompat.widget.AppCompatButtonimport androidx.appcompat.widget.Toolbarimport androidx.core.content.ContextCompatimport androidx.lifecycle.Lifecycleimport androidx.lifecycle.OnLifecycleEventimport androidx.viewpager.widget.ViewPagerimport androidx.viewpager.widget.ViewPager.OnPageChangeListenerimport com.Joaquin.thiago.ListIdPicimport com.airbnb.lottie.LottieAnimationViewimport com.google.android.material.bottomsheet.BottomSheetDialogimport com.google.api.client.extensions.android.http.AndroidHttpimport com.google.api.client.googleapis.extensions.android.gms.auth.GoogleAccountCredentialimport com.google.api.client.json.gson.GsonFactoryimport com.google.api.services.drive.Driveimport com.hidefile.secure.folder.vault.AdActivity.Common_Admimport com.hidefile.secure.folder.vault.AdActivity.SharedPrefimport com.hidefile.secure.folder.vault.Rimport com.hidefile.secure.folder.vault.cluecanva.*import com.hidefile.secure.folder.vault.dpss.IvFullScreenAdpclass IvFullScreenView() : FoundationActivity(), View.OnClickListener {    var llMore: LinearLayout? = null    var tv_tital: VTv? = null    var view_topview: View? = null    var listIdPics: ArrayList<ListIdPic>? = ArrayList()    var iv_share: ImageView? = null    var iv_unhide: ImageView? = null    var position = 0    var service: Drive? = null    var ivFullScreenAdp: IvFullScreenAdp? = null    var view_pager: ViewPager? = null    var mContext: Context? = null    var mBottomView: LinearLayout? = null    var llUnHide: LinearLayout? = null    var llDelete: LinearLayout? = null    var iv_delete: ImageView? = null    var RDbhp: RDbhp? = null    var isbackup = false    var isFromVault = false    var idNative = ""    private var isFromTrash = false    private val credential: GoogleAccountCredential? = null    private var listPopupWindow: ListPopupWindow? = null    @SuppressLint("MissingInflatedId")    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        TooRfl.deleteTempFolder()//        requestWindowFeature(Window.FEATURE_NO_TITLE)//        window.setFlags(//            WindowManager.LayoutParams.FLAG_FULLSCREEN,//            WindowManager.LayoutParams.FLAG_FULLSCREEN//        )        setContentView(R.layout.iv_full_screen)        SharedPref.AppOpenShow = false        Common_Adm.getInstance().loadBanner(this@IvFullScreenView, findViewById<ViewGroup?>(R.id.llBanner),findViewById<ViewGroup?>(R.id.adSimmer1))        mContext = this@IvFullScreenView        RDbhp = com.hidefile.secure.folder.vault.cluecanva.RDbhp.getInstance(mContext)        position = intent.getIntExtra("postion", 0)        isFromTrash = intent.getBooleanExtra("isFromTrash", false)        isFromVault = intent.getBooleanExtra("isFromVault", false)        listIdPics = intent.getSerializableExtra("listIdPics") as ArrayList<ListIdPic>?        view_topview = findViewById(R.id.view_topview)        val toolbar = findViewById<Toolbar>(R.id.main_toolbar)        setSupportActionBar(toolbar)        tv_tital = toolbar.findViewById(R.id.tv_tital)        toolbar.findViewById<View>(R.id.iv_back).setOnClickListener(            View.OnClickListener { finish() })        view_pager = findViewById(R.id.view_pager)        Init()    }    private fun Init() {        iv_share = findViewById(R.id.iv_share)        iv_delete = findViewById(R.id.ivIconDelete1)        iv_unhide = findViewById(R.id.iv_unhide)        mBottomView = findViewById(R.id.bottomView)        llUnHide = findViewById(R.id.linUnHide)        llDelete = findViewById(R.id.linDelete)        llMore = findViewById(R.id.llMore)        ivFullScreenAdp = IvFullScreenAdp(this, (listIdPics)!!, this)        view_pager!!.adapter = ivFullScreenAdp        view_pager!!.currentItem = position        if (isFromTrash) {            iv_unhide!!.setImageResource(R.drawable.ic_recovery)        } else {            iv_unhide!!.setImageResource(R.drawable.icon_unlock)        }        iv_share!!.setOnClickListener(this)        iv_delete!!.setOnClickListener(this)        iv_unhide!!.setOnClickListener(this)        llUnHide!!.setOnClickListener(this)        llDelete!!.setOnClickListener(this)        llMore!!.setOnClickListener(this)        tv_tital!!.text = listIdPics!!.get(position).getDisplayName()        prepareOptionMenu(llMore)        view_pager!!.addOnPageChangeListener(object : OnPageChangeListener {            override fun onPageScrollStateChanged(state: Int) {}            override fun onPageScrolled(                position: Int,                positionOffset: Float,                positionOffsetPixels: Int            ) {            }            override fun onPageSelected(position: Int) {                tv_tital!!.text = listIdPics!!.get(position).getDisplayName()            }        })        if (isFromVault) {            mBottomView!!.setVisibility(View.GONE)        }    }    override fun onClick(v: View) {        when (v.id) {            R.id.linUnHide -> dialogUnhideFile(this@IvFullScreenView)            R.id.linDelete -> dialogDeletePhotoView(this@IvFullScreenView)            R.id.llMore -> if (listPopupWindow!!.isShowing) {                listPopupWindow!!.dismiss()            } else {                listPopupWindow!!.show()            }        }    }    private fun prepareOptionMenu(v: View?) {        listPopupWindow = ListPopupWindow((mContext)!!, null)        listPopupWindow!!.setBackgroundDrawable(            ContextCompat.getDrawable(                (mContext)!!,                R.drawable.main_more            )        )        listPopupWindow!!.anchorView = v        val items = arrayOf("Edit Name", "Open with", "Share")        val adapter = ArrayAdapter(            (mContext)!!, R.layout.it_list_win, items        )        listPopupWindow!!.setAdapter(adapter)        listPopupWindow!!.setOnItemClickListener { adapterView: AdapterView<*>?, view: View?, i: Int, l: Long ->            val position: Int = view_pager!!.getCurrentItem()            when (items.get(i)) {                "Edit Name" -> dialogEditFileName(                    position,                    listIdPics!!.get(position).getDisplayName()                )                "Open with" -> TooRfl.openWith(mContext!!, listIdPics!!.get(position))                "Share" -> TooRfl.shareImage(                    mContext!!,                    listIdPics!!.get(position).getNewPath(),                    listIdPics!!.get(position).getDisplayName()                )            }            listPopupWindow!!.dismiss()        }    }    fun dialogEditFileName(position: Int, existingFileName: String) {    }    @SuppressLint("SetTextI18n")    fun dialogDeletePhotoView(act: Activity?) {        val bottomSheetDialog = BottomSheetDialog(            (act)!!, R.style.BottomSheetDialogTheme        )        val dialogView = View.inflate(act, R.layout.dig_delete, null)        val animationView = dialogView.findViewById<LottieAnimationView>(R.id.animation_view)        val button_negative = dialogView.findViewById<AppCompatButton>(R.id.btn_negative)        val button_positive = dialogView.findViewById<AppCompatButton>(R.id.btn_positive)        val title = dialogView.findViewById<TextView>(R.id.tv_sort_title)        val textView_message = dialogView.findViewById<TextView>(R.id.textView_message)        val lin_careful = dialogView.findViewById<LinearLayout>(R.id.lin_careful)        val chk_trash = dialogView.findViewById<CheckBox>(R.id.chk_trash)        val chk_cloud = dialogView.findViewById<CheckBox>(R.id.chk_cloud)        val selected = listIdPics!![view_pager!!.currentItem]        val cid = selected.getCouldId()        Log.i(TAG, "dialogDeletePhotoView: cid :- $cid")        if (cid == null || cid.equals("null1", ignoreCase = true)) {        } else {            isbackup = true        }        title.text = "Sure to Delete Pictures?"        title.visibility = View.VISIBLE        textView_message.text = "Do you Really Want to Delete the selected " + "Pictures?"        animationView.setAnimation(R.raw.animation_delete)        if (isbackup) chk_cloud.visibility = View.VISIBLE else chk_cloud.visibility = View.GONE        chk_trash.setOnCheckedChangeListener(object : CompoundButton.OnCheckedChangeListener {            override fun onCheckedChanged(buttonView: CompoundButton, isChecked: Boolean) {                if (isChecked) {                    lin_careful.visibility = View.GONE                } else {                    if (isbackup) {                        if (chk_cloud.isChecked) lin_careful.visibility =                            View.GONE else lin_careful.visibility = View.VISIBLE                    } else {                        lin_careful.visibility = View.VISIBLE                    }                }            }        })        chk_cloud.setOnCheckedChangeListener(object : CompoundButton.OnCheckedChangeListener {            override fun onCheckedChanged(buttonView: CompoundButton, isChecked: Boolean) {                if (isChecked) {                    lin_careful.visibility = View.GONE                } else {                    if (isbackup) {                        if (chk_trash.isChecked) lin_careful.visibility =                            View.GONE else lin_careful.visibility = View.VISIBLE                    } else {                        lin_careful.visibility = View.VISIBLE                    }                }            }        })        button_negative.text = "Cancel"        button_positive.text = "Delete"        button_negative.setOnClickListener(object : View.OnClickListener {            override fun onClick(v: View) {                bottomSheetDialog.dismiss()            }        })        button_positive.setOnClickListener(object : View.OnClickListener {            override fun onClick(v: View) {                deletImage(chk_trash.isChecked, chk_cloud.isChecked)                bottomSheetDialog.dismiss()            }        })        if (isFromTrash) {            chk_trash.visibility = View.GONE            chk_trash.isChecked = false        } else {            chk_trash.visibility = View.VISIBLE        }        bottomSheetDialog.setContentView(dialogView)        bottomSheetDialog.setCancelable(true)        bottomSheetDialog.show()    }    private fun deletImage(isCheckedTrash: Boolean, isCheckCloud: Boolean) {        DeleteCloudFileTask(mContext!!, isCheckedTrash, isCheckCloud).execute()    }    private fun getDriveService(credential: GoogleAccountCredential): Drive {        return Drive.Builder(AndroidHttp.newCompatibleTransport(), GsonFactory(), credential)            .setApplicationName(                getString(                    R.string.app_name                )            ).build()    }    fun dialogUnhideFile(act: Activity?) {        val title = if (isFromTrash) "Sure to Restore Images?" else "Sure to Unhide Pictures ??"        val msg =            if (isFromTrash) "Do you Really Want to restore selected Pictures ??" else "Do you Really Want to Unhide selected Pictures ??"        val positiveButton = if (isFromTrash) "Restore" else "Unhide"        val animFile = if (isFromTrash) R.raw.animation_againrebuilt else R.raw.animation_no_root        val bottomSheetDialog = BottomSheetDialog(            (act)!!, R.style.BottomSheetDialogTheme        )        val dialogView = View.inflate(act, R.layout.dig_delete, null)        val button_positive = dialogView.findViewById<AppCompatButton>(R.id.btn_positive)        val button_negative = dialogView.findViewById<AppCompatButton>(R.id.btn_negative)        val tvTitle = dialogView.findViewById<TextView>(R.id.tv_sort_title)        val textView_message = dialogView.findViewById<TextView>(R.id.textView_message)        tvTitle.text = title        tvTitle.visibility = View.VISIBLE        textView_message.text = msg        button_positive.text = positiveButton        button_negative.text = getString(R.string.dialog_cancel)        button_positive.setOnClickListener { view: View? ->            val postion: Int = view_pager!!.getCurrentItem()            val listIdPic: ListIdPic = listIdPics!!.get(postion)            if (isFromTrash) {                RDbhp!!.reCoverPhoto(listIdPic.getId())            } else {                val isDeleted: Boolean = mContext?.let {                    TooRfl.makeUnHide(                        it,                        listIdPic.getPath(),                        listIdPic.getNewPath(),                        TillsPth.restorePathImage + listIdPic.getDisplayName(),                        1                    )                } == true                if (isDeleted) {                    RDbhp!!.deletePhotoItem(listIdPic.getId())                }            }            EntryAux.showToast(mContext, R.string.un_hide_success_msg)            ivFullScreenAdp!!.removePage((view_pager)!!, postion)            bottomSheetDialog.dismiss()        }        button_negative.setOnClickListener({ view: View? -> bottomSheetDialog.dismiss() })        bottomSheetDialog.setContentView(dialogView)        bottomSheetDialog.show()    }    override fun onBackPressed() {        setResult(Activity.RESULT_OK)        super.onBackPressed()    }    inner class DeleteCloudFileTask(        var context: Context,        var isCheckedTrash: Boolean,        var isCheckCloud: Boolean    ) : AsyncTask<String?, String?, String>() {        var pd: ProgressDialog? = null        var selected: ListIdPic        override fun onPreExecute() {            super.onPreExecute()            pd = ProgressDialog(this@IvFullScreenView)            pd!!.setTitle(context.getString(R.string.connected_server_msg))            pd!!.setMessage(context.getString(R.string.please_wait_msg))            pd!!.setCancelable(false)            pd!!.isIndeterminate = true            pd!!.show()        }        protected override fun doInBackground(vararg params: String?): String? {            RDbhp?.let {                TooRfl.deleteImageVideoFile(                    mContext,                    selected.getId(),                    selected.getNewPath(),                    it,                    isCheckedTrash,                    isCheckCloud,                    service,                    1                )            }            return "null"        }        override fun onPostExecute(s: String) {            super.onPostExecute(s)            pd!!.dismiss()            ivFullScreenAdp!!.removePage((view_pager)!!, view_pager!!.currentItem)            Toast.makeText(mContext, "Delete files successfully", Toast.LENGTH_SHORT).show()        }        init {            selected = listIdPics!![view_pager!!.currentItem]        }    }    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)    override fun onResume() {        super.onResume()        SharedPref.AppOpenShow = false        Log.d("Message","Resume");    }    @OnLifecycleEvent(Lifecycle.Event.ON_START)    override fun onStart() {        super.onStart()        Log.d("Message","onstart");        SharedPref.AppOpenShow = false    }    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)    override fun onPause() {        super.onPause()        Log.d("Message","onpause");        SharedPref.AppOpenShow = false    }    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)    override fun onStop() {        super.onStop()        Log.d("Message","stop");        SharedPref.AppOpenShow = false    }    companion object {        private val TAG = IvFullScreenView::class.java.simpleName    }}